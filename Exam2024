Task 2: Using openGauss to Analyze Supply Chain Requirements of a
Company (100 points)
Lab task scenario:

Understand the basic functions of openGauss and how to import data. Analyze the order data
of a company and its suppliers as follows:

1. Analyze the revenue generated by suppliers in a region for the company. The statistics can
be used to determine whether a local allocation center needs to be established in a given
region.

2. Analyze the relationship between parts and suppliers to obtain the number of suppliers for
parts based on the specified contribution conditions. The information can be used to
determine whether there are enough suppliers for large order quantities when the task is
urgent.

3. Analyze the revenue loss of small orders. You can query the average annual revenue loss if there are no small orders. Filter out small orders that are lower than 20% of the average
supply volume and calculate the total amount of the small orders to determine the average annual revenue loss.


Description of the eight tables:
(1) PART: indicates part information. The primary key is p_partkey, which ranges from 1 to SF*200000 and is used to join the PARTSUPP table. (2) SUPPLIER: indicates supplier
information. The primary key is s_suppkey, which ranges from 1 to SF*10000 and is used
to join the PARTSUPP, CUSTOMER, and NATION tables.
(3) PARTSUPP: indicates supplier's part information. The primary keys are ps_partkey and
ps_suppkey, which are used to join the PART, SUPPLIER, and LINEITEM tables.
(4) CUSTOMER: indicates consumer information. The primary key is c_custkey, which
ranges from 1 to SF*150000 and is used to join the ORDERS table.
(5) ORDERS: indicates order information. The primary key is o_orderkey, which ranges
from 1 to SF*1500000 and is used to join the LINEITEM table.
(6) LINEITEM: indicates line item information. The primary keys are Lorderkey and
Llinenumber. This table has the largest data volume.
(7) NATION: indicates country information. The primary key is n_nationkey. There are 25
fixed countries.
(8) REGION indicates region information. The primary key is r_regionkey. There are five
fixed regions.
Structures of the eight tables



#############
Subtask 1: Create the tssupplychain tablespace.
Procedure:

a. Log in to the postgres database as the omm user. The database port number is 15432.
Run SQL statements to create the tssupplychain tablespace in the relative path
ts/tssupplychain.

Screenshot requirements:
a. Take a screenshot of the output of the SQL statement for creating the tablespace and
save it as 2-1-1create_tablespace.
-----------------

gsql -d postgres -p 15432 -U omm

[omm@]# CREATE TABLESPACE tssupplychain RELATIVE LOCATION 'ts/tssupplychain';

-----------------


############
Subtask 2: Create the dbsupplychain database and switch to the database.
Procedure:

a. Log in to the postgres database as the omm user. The database port number is 15432.
Run SQL statements to create the dbsupplychain database with the UTF8 character set
and the tssupplychain tablespace.

b. Run the meta-command to switch to the dbsupplychain database.

Screenshot requirements:
a. Take a screenshot of the command to create the database and its output and save it as
2-2-1create_db.

b. Take a screenshot of the meta-command to switch to the dbsupplychain database and
its output and save it as 2-2-2change_db.
-----------------
✅ a. Create the dbsupplychain Database

CREATE DATABASE dbsupplychain 
    WITH ENCODING='UTF8' 
    TABLESPACE=tssupplychain;

✅ b. Switch to the dbsupplychain Database

\c dbsupplychain

-----------------



###########
Subtask 3: Import data.
Procedure:

a.Copy the supplychain.tar file from the /root/datasets directory to the /home/omm
EEdirectory. Change the owner and user group of the /home/omm/supplychain.tar file to
omm and dbgrp, respectively. Change the permission on the
/home/omm/supplychain.tar file to 755.

b. Run the gs_restore command to import supplychain.tar to the dbsupplychain database.
The database port number is 15432.

Screenshot requirements:

a. Take a screenshot of the command for modifying the user and user group and save it as 2-3-1chown. 
Take a screenshot of the command for modifying the permission and
save it as 2-3-2chmod. 
Take a screenshot of the modified file permission information
and save it as 2-3-3modified_result.

b. Take a screenshot of the command output indicating that the data is successfully
imported and save it as 2-3-4gs_restore.

------------------
✅ a. Copy, Change Ownership & Permission of the File
cp /root/datasets/supplychain.tar /home/omm/
chown omm:dbgrp /home/omm/supplychain.tar
screen:: 2-3-1

chmod 755 /home/omm/supplychain.tar
screen::2-3-2

ls -l /home/omm/supplychain.tar
-rwxr-xr-x 1 omm dbgrp 123456 May 14 14:00 /home/omm/supplychain.tar
screen:: 2-3-3

✅ b. Import the Data Using gs_restore

gs_restore -d dbsupplychain -p 15432 /home/omm/supplychain.tar

gs_restore: restoring data for table "part"
gs_restore: restoring data for table "supplier"
...
gs_restore: restore complete
screeen:: 2-3-4

------------------


############
Subtask 4: Query the revenue generated by a supplier in a region for the company in a year.

Procedure:

a. Query the annual revenue of suppliers in each country in the region named ASIA in
1995. The unit of the query time is years. The time format is year-month-day and the
start time is 1995-01-01. The revenue is calculated by sum( Lextendedprice * (1 -
Ldiscount)), and the alias is revenue. Only two columns are displayed in the query
result set: country name (n_name) and revenue (revenue). The query result is as
follows:
n_name	| revenue
.................
AAAXXX	| 555.1697

Screenshot requirements:
a.Take a screenshot of the SQL query statement and save it as 2-4-
1country_revenue_query.

Take a screenshot of the SQL statement output and save it as 2-4-
2country_revenue_result.
--------------------

SELECT n.n_name AS country_name, 
       SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
JOIN supplier s ON s.s_nationkey = n.n_nationkey
JOIN lineitem l ON l.l_suppkey = s.s_suppkey
JOIN orders o ON o.o_orderkey = l.l_orderkey
WHERE r.r_name = 'ASIA'
  AND o.o_orderdate >= '1995-01-01'
  AND o.o_orderdate < '1996-01-01'
GROUP BY n.n_name
ORDER BY revenue DESC;

------------------


##############
Subtask 5: Check whether there are sufficient part suppliers.
Procedure:

a.The query conditions are as follows: The part brand is not Brand#51. The part type
does not contain MEDIUM POLISHED. The part size is within the range [49, 14, 23, 45,19, 3, 36, 9]. 
The parts suppliers must be unique and should not have any customer
complaints against them. That is, s_comment does not contain the character strings
Customer and Complaints. Parts are grouped by part brand, part type, and part size.
Parts are sorted by the total number of part suppliers (the alias must be supplier_cnt)
in descending order, and then by part brand, part type, and part size in ascending
order. The query result set contains only 10 records, and only four columns are
displayed: p_brand, p_type, p_size, and supplier_cnt.

Screenshot requirements:

a. Take a screenshot of the SQL query statement and save it as 2-5-1supplier_query.
   Take a screenshot of the SQL statement output and save it as 2-5-2supplier_result.

--------------------

SELECT p.p_brand, 
       p.p_type, 
       p.p_size, 
       COUNT(DISTINCT ps.ps_suppkey) AS supplier_cnt
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
WHERE p.p_brand <> 'Brand#51'
  AND p.p_type NOT LIKE '%MEDIUM POLISHED%'
  AND p.p_size IN (49, 14, 23, 45, 19, 3, 36, 9)
  AND s.s_comment NOT LIKE '%Customer%'
  AND s.s_comment NOT LIKE '%Complaints%'
GROUP BY p.p_brand, p.p_type, p.p_size
ORDER BY supplier_cnt DESC, p.p_brand, p.p_type, p.p_size
LIMIT 10;
--------------------


###############
Subtask 6: Compile a user-defined function to implement a complex query.
Procedure:

a.Write a user-defined function to query how much average annual revenue will be lost
if there are no small orders (the number of orders is less than 15% of the average
supply). Select small orders whose part brand is Brand#43, part packaging is JUMBO
PACK, and parts quantity is less than 15% of the average supply. Calculate the average
annual revenue loss by using the formula: Total price/7.

b.Call the user-defined function. The execution result should be as follows:

   avg_yearly
  ...........
  31xxx.368xxx

Screenshot requirements:

a.Take a screenshot of the SQL query statement in the user-defined function and save it
as 2-6-1func_subsql.
Take a screenshot of the complete user-defined function and save it as 2-6-2func_all.

b.Take a screenshot of the execution result of calling the user-defined function and save
it as 2-6-3func_result.

---------------------
a. Write the Function

SELECT SUM(l.l_extendedprice * (1 - l.l_discount)) / 7
FROM lineitem l
JOIN part p ON l.l_partkey = p.p_partkey
WHERE p.p_brand = 'Brand#43'
  AND p.p_container = 'JUMBO PACK'
  AND l.l_quantity < (
      SELECT 0.15 * AVG(l2.l_quantity)
      FROM lineitem l2
  );

screen::2-6-1

CREATE OR REPLACE FUNCTION get_avg_yearly_revenue_loss() 
RETURNS NUMERIC AS $$
DECLARE
  avg_yearly NUMERIC;
BEGIN
  SELECT SUM(l.l_extendedprice * (1 - l.l_discount)) / 7
  INTO avg_yearly
  FROM lineitem l
  JOIN part p ON l.l_partkey = p.p_partkey
  WHERE p.p_brand = 'Brand#43'
    AND p.p_container = 'JUMBO PACK'
    AND l.l_quantity < (
        SELECT 0.15 * AVG(l2.l_quantity)
        FROM lineitem l2
    );

  RETURN avg_yearly;
END;
$$ LANGUAGE plpgsql;

screen::2-6-2


b. Call the Function

SELECT get_avg_yearly_revenue_loss() AS avg_yearly;

--------------------


